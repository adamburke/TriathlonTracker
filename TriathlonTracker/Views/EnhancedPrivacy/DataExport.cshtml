@model IEnumerable<TriathlonTracker.Models.DataExportRequest>
@using TriathlonTracker.Models.Enums

@{
    ViewData["Title"] = "Data Export Requests";
}

<div class="container mt-4">
    <div class="row">
        <div class="col-md-12">
            <div class="card">
                <div class="card-header d-flex justify-content-between align-items-center">
                    <h4 class="mb-0">
                        <i class="fas fa-download me-2"></i>Data Export Requests
                    </h4>
                    <button type="button" class="btn btn-primary" data-bs-toggle="modal" data-bs-target="#exportModal">
                        <i class="fas fa-plus me-1"></i>New Export Request
                    </button>
                </div>
                <div class="card-body">
                    <div class="alert alert-info">
                        <i class="fas fa-info-circle me-2"></i>
                        You can request exports of your personal data in various formats. Export files are available for 30 days after generation.
                    </div>

                    @if (Model.Any())
                    {
                        <div class="table-responsive">
                            <table class="table table-striped">
                                <thead>
                                    <tr>
                                        <th>Request Date</th>
                                        <th>Format</th>
                                        <th>Status</th>
                                        <th>File Size</th>
                                        <th>Downloads</th>
                                        <th>Expires</th>
                                        <th>Actions</th>
                                    </tr>
                                </thead>
                                <tbody>
                                    @foreach (var request in Model)
                                    {
                                        <tr>
                                            <td>@request.RequestDate.ToString("yyyy-MM-dd HH:mm")</td>
                                            <td>
                                                <span class="badge bg-secondary">@request.Format</span>
                                            </td>
                                            <td>
                                                @switch (request.Status)
                                                {
                                                    case "Pending":
                                                        <span class="badge bg-warning">Pending</span>
                                                        break;
                                                    case "Processing":
                                                        <span class="badge bg-info">Processing</span>
                                                        break;
                                                    case "Completed":
                                                        <span class="badge bg-success">Completed</span>
                                                        break;
                                                    case "Failed":
                                                        <span class="badge bg-danger">Failed</span>
                                                        break;
                                                    case "Expired":
                                                        <span class="badge bg-dark">Expired</span>
                                                        break;
                                                }
                                            </td>
                                            <td>
                                                @if (request.FileSizeBytes > 0)
                                                {
                                                    @((request.FileSizeBytes / 1024.0).ToString("F1") + " KB")
                                                }
                                                else
                                                {
                                                    <span class="text-muted">-</span>
                                                }
                                            </td>
                                            <td>@request.DownloadCount</td>
                                            <td>
                                                @if (request.ExpirationDate.HasValue)
                                                {
                                                    @request.ExpirationDate.Value.ToString("yyyy-MM-dd")
                                                }
                                                else
                                                {
                                                    <span class="text-muted">-</span>
                                                }
                                            </td>
                                            <td>
                                                @if (request.Status == "Completed" && !string.IsNullOrEmpty(request.DownloadUrl))
                                                {
                                                    <a href="@Url.Action("DownloadExport", new { requestId = request.Id, token = "temp" })" 
                                                       class="btn btn-sm btn-outline-primary">
                                                        <i class="fas fa-download me-1"></i>Download
                                                    </a>
                                                }
                                                @if (request.Status == "Failed")
                                                {
                                                    <button type="button" class="btn btn-sm btn-outline-info" 
                                                            data-bs-toggle="tooltip" title="@request.ErrorMessage">
                                                        <i class="fas fa-exclamation-triangle"></i>
                                                    </button>
                                                }
                                            </td>
                                        </tr>
                                    }
                                </tbody>
                            </table>
                        </div>
                    }
                    else
                    {
                        <div class="text-center py-4">
                            <i class="fas fa-download fa-3x text-muted mb-3"></i>
                            <h5 class="text-muted">No export requests found</h5>
                            <p class="text-muted">Click "New Export Request" to create your first data export.</p>
                        </div>
                    }
                </div>
            </div>
        </div>
    </div>
</div>

<!-- Export Request Modal -->
<div class="modal fade" id="exportModal" tabindex="-1" aria-labelledby="exportModalLabel" aria-hidden="true">
    <div class="modal-dialog">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title" id="exportModalLabel">Request Data Export</h5>
                <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
            </div>
            <form id="exportForm">
                <div class="modal-body">
                    <div class="mb-3">
                        <label for="exportFormat" class="form-label">Export Format</label>
                        <select class="form-select" id="exportFormat" name="format" required>
                            <option value="JSON">JSON (JavaScript Object Notation)</option>
                            <option value="CSV">CSV (Comma Separated Values)</option>
                            <option value="XML">XML (Extensible Markup Language)</option>
                        </select>
                        <div class="form-text">Choose the format for your data export.</div>
                    </div>
                    <div class="alert alert-warning">
                        <i class="fas fa-exclamation-triangle me-2"></i>
                        <strong>Important:</strong> Export files contain all your personal data and will be available for download for 30 days. 
                        Please ensure you download and store the file securely.
                    </div>
                </div>
                <div class="modal-footer">
                    <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Cancel</button>
                    <button type="submit" class="btn btn-primary">
                        <i class="fas fa-download me-1"></i>Request Export
                    </button>
                </div>
            </form>
        </div>
    </div>
</div>

@section Scripts {
    <script>
        $(document).ready(function() {
            // Initialize tooltips
            $('[data-bs-toggle="tooltip"]').tooltip();

            // Handle export form submission
            $('#exportForm').on('submit', function(e) {
                e.preventDefault();
                
                const format = $('#exportFormat').val();
                const submitBtn = $(this).find('button[type="submit"]');
                const originalText = submitBtn.html();
                
                submitBtn.prop('disabled', true).html('<i class="fas fa-spinner fa-spin me-1"></i>Processing...');
                
                $.ajax({
                    url: '@Url.Action("RequestDataExport", "EnhancedPrivacy")',
                    type: 'POST',
                    data: { format: format },
                    headers: {
                        'RequestVerificationToken': $('input[name="__RequestVerificationToken"]').val()
                    },
                    success: function(response) {
                        if (response.success) {
                            $('#exportModal').modal('hide');
                            showAlert('success', response.message);
                            setTimeout(() => location.reload(), 2000);
                        } else {
                            showAlert('danger', response.message);
                        }
                    },
                    error: function() {
                        showAlert('danger', 'An error occurred while processing your request.');
                    },
                    complete: function() {
                        submitBtn.prop('disabled', false).html(originalText);
                    }
                });
            });

            function showAlert(type, message) {
                const alert = `
                    <div class="alert alert-${type} alert-dismissible fade show" role="alert">
                        ${message}
                        <button type="button" class="btn-close" data-bs-dismiss="alert"></button>
                    </div>
                `;
                $('.container').prepend(alert);
            }
        });
    </script>
}