@model TriathlonTracker.Models.Triathlon
@using Microsoft.AspNetCore.Mvc.Localization
@inject IViewLocalizer Localizer

@{
    ViewData["Title"] = Localizer["Add New Race"];
    var totalDistance = Localizer["Total Distance"];
    var totalTime = Localizer["Total Time"];
    var swimPace = Localizer["Swim Pace"];
    var bikePace = Localizer["Bike Pace"];
    var runPace = Localizer["Run Pace"];
    var minPer100Yd = Localizer["min/100yd"];
    var minPer100M = Localizer["min/100m"];
    var mph = Localizer["mph"];
    var kmPerHr = Localizer["km/hr"];
    var minPerMile = Localizer["min/mile"];
    var minPerKm = Localizer["min/km"];
    var swimTimeRequired = Localizer["Swim time is required when swim distance is provided."];
    var bikeTimeRequired = Localizer["Bike time is required when bike distance is provided."];
    var runTimeRequired = Localizer["Run time is required when run distance is provided."];
    var raceNameRequired = Localizer["Race Name is required."];
    var raceDateRequired = Localizer["Race Date is required."];
    var locationRequired = Localizer["Location is required."];
    var requiredFieldsAlert = Localizer["Please fill in all required fields."];
    var atLeastOneDisciplineAlert = Localizer["Please enter at least one discipline (swim, bike, or run)."];
    var totalDistanceLabel = Localizer["Total Distance"];
    var totalDistanceUnitMiles = Localizer["miles_lower"];
}

<div class="container-fluid">
    <div class="row mb-4">
        <div class="col-12">
            <div class="d-flex justify-content-between align-items-center">
                <h1 class="text-dark fw-bold">
                    <i class="fas fa-plus me-2"></i>@Localizer["Add New Race"]
                </h1>
                <a asp-action="Index" class="btn btn-outline-primary">
                    <i class="fas fa-arrow-left me-2"></i>@Localizer["Back to Races"]
                </a>
            </div>
        </div>
    </div>

    <div class="row">
        <div class="col-lg-8">
            <div class="card">
                <div class="card-header">
                    <h5 class="mb-0">
                        <i class="fas fa-edit me-2"></i>@Localizer["Race Information"]
                    </h5>
                </div>
                <div class="card-body">
                    <form asp-action="Create" method="post">
                        <div asp-validation-summary="ModelOnly" class="alert alert-danger" role="alert" id="validationSummary"></div>
                        
                        <div class="row">
                            <div class="col-md-6 mb-3">
                                <label asp-for="RaceName" class="form-label">
                                    <i class="fas fa-trophy me-2"></i>@Localizer["Race Name"]
                                </label>
                                <input asp-for="RaceName" class="form-control" placeholder="@Localizer["Enter race name"]" />
                                <span asp-validation-for="RaceName" class="text-danger"></span>
                            </div>
                            <div class="col-md-6 mb-3">
                                <label asp-for="RaceDate" class="form-label">
                                    <i class="fas fa-calendar me-2"></i>@Localizer["Race Date"]
                                </label>
                                <input asp-for="RaceDate" class="form-control" type="date" />
                                <span asp-validation-for="RaceDate" class="text-danger"></span>
                            </div>
                        </div>

                        <div class="mb-3">
                            <label asp-for="Location" class="form-label">
                                <i class="fas fa-map-marker-alt me-2"></i>@Localizer["Location"]
                            </label>
                            <input asp-for="Location" class="form-control" placeholder="@Localizer["Enter race location"]" />
                            <span asp-validation-for="Location" class="text-danger"></span>
                        </div>

                        <hr class="my-4">

                        <!-- Swim Section -->
                        <div class="row">
                            <div class="col-12">
                                <h5 class="text-primary mb-3">
                                    <i class="fas fa-swimming-pool me-2"></i>@Localizer["Swim"]
                                </h5>
                            </div>
                            <div class="col-md-4 mb-3">
                                <label asp-for="SwimDistance" class="form-label">@Localizer["Distance"]</label>
                                <input asp-for="SwimDistance" class="form-control" type="number" step="0.1" min="0" id="swimDistance" />
                                <span asp-validation-for="SwimDistance" class="text-danger"></span>
                            </div>
                            <div class="col-md-2 mb-3">
                                <label class="form-label">@Localizer["Unit"]</label>
                                <select class="form-control" id="swimUnit">
                                    <option value="yards">@Localizer["Yards"]</option>
                                    <option value="meters">@Localizer["Meters"]</option>
                                </select>
                                <input asp-for="SwimUnit" type="hidden" id="swimUnitHidden" value="yards" />
                            </div>
                            <div class="col-md-6 mb-3">
                                <label class="form-label">@Localizer["Time (HH:MM:SS)"]</label>
                                <div class="row">
                                    <div class="col-4">
                                        <input type="number" class="form-control" id="swimHours" placeholder="@Localizer["HH"]" min="0" max="23" />
                                    </div>
                                    <div class="col-4">
                                        <input type="number" class="form-control" id="swimMinutes" placeholder="@Localizer["MM"]" min="0" max="59" />
                                    </div>
                                    <div class="col-4">
                                        <input type="number" class="form-control" id="swimSeconds" placeholder="@Localizer["SS"]" min="0" max="59" />
                                    </div>
                                </div>
                                <input asp-for="SwimTime" type="hidden" id="swimTime" />
                                <span asp-validation-for="SwimTime" class="text-danger"></span>
                            </div>
                        </div>
                        <div class="mb-3">
                            <div id="swimPace" class="pace-display" style="display: none;">
                                <i class="fas fa-tachometer-alt me-2"></i>@Localizer["Swim Pace"]: <span id="swimPaceValue">0</span> <span id="swimPaceUnit">min/m</span>
                            </div>
                        </div>

                        <!-- Bike Section -->
                        <div class="row">
                            <div class="col-12">
                                <h5 class="text-primary mb-3">
                                    <i class="fas fa-bicycle me-2"></i>@Localizer["Bike"]
                                </h5>
                            </div>
                            <div class="col-md-4 mb-3">
                                <label asp-for="BikeDistance" class="form-label">@Localizer["Distance"]</label>
                                <input asp-for="BikeDistance" class="form-control" type="number" step="0.1" min="0" id="bikeDistance" />
                                <span asp-validation-for="BikeDistance" class="text-danger"></span>
                            </div>
                            <div class="col-md-2 mb-3">
                                <label class="form-label">@Localizer["Unit"]</label>
                                <select class="form-control" id="bikeUnit">
                                    <option value="miles">@Localizer["Miles"]</option>
                                    <option value="km">@Localizer["Kilometers"]</option>
                                </select>
                                <input asp-for="BikeUnit" type="hidden" id="bikeUnitHidden" value="miles" />
                            </div>
                            <div class="col-md-6 mb-3">
                                <label class="form-label">@Localizer["Time (HH:MM:SS)"]</label>
                                <div class="row">
                                    <div class="col-4">
                                        <input type="number" class="form-control" id="bikeHours" placeholder="@Localizer["HH"]" min="0" max="23" />
                                    </div>
                                    <div class="col-4">
                                        <input type="number" class="form-control" id="bikeMinutes" placeholder="@Localizer["MM"]" min="0" max="59" />
                                    </div>
                                    <div class="col-4">
                                        <input type="number" class="form-control" id="bikeSeconds" placeholder="@Localizer["SS"]" min="0" max="59" />
                                    </div>
                                </div>
                                <input asp-for="BikeTime" type="hidden" id="bikeTime" />
                                <span asp-validation-for="BikeTime" class="text-danger"></span>
                            </div>
                        </div>
                        <div class="mb-3">
                            <div id="bikePace" class="pace-display" style="display: none;">
                                <i class="fas fa-tachometer-alt me-2"></i>@Localizer["Bike Pace"]: <span id="bikePaceValue">0</span> <span id="bikePaceUnit">mph</span>
                            </div>
                        </div>

                        <!-- Run Section -->
                        <div class="row">
                            <div class="col-12">
                                <h5 class="text-primary mb-3">
                                    <i class="fas fa-running me-2"></i>@Localizer["Run"]
                                </h5>
                            </div>
                            <div class="col-md-4 mb-3">
                                <label asp-for="RunDistance" class="form-label">@Localizer["Distance"]</label>
                                <input asp-for="RunDistance" class="form-control" type="number" step="0.1" min="0" id="runDistance" />
                                <span asp-validation-for="RunDistance" class="text-danger"></span>
                            </div>
                            <div class="col-md-2 mb-3">
                                <label class="form-label">@Localizer["Unit"]</label>
                                <select class="form-control" id="runUnit">
                                    <option value="miles">@Localizer["Miles"]</option>
                                    <option value="km">@Localizer["Kilometers"]</option>
                                </select>
                                <input asp-for="RunUnit" type="hidden" id="runUnitHidden" value="miles" />
                            </div>
                            <div class="col-md-6 mb-3">
                                <label class="form-label">@Localizer["Time (HH:MM:SS)"]</label>
                                <div class="row">
                                    <div class="col-4">
                                        <input type="number" class="form-control" id="runHours" placeholder="@Localizer["HH"]" min="0" max="23" />
                                    </div>
                                    <div class="col-4">
                                        <input type="number" class="form-control" id="runMinutes" placeholder="@Localizer["MM"]" min="0" max="59" />
                                    </div>
                                    <div class="col-4">
                                        <input type="number" class="form-control" id="runSeconds" placeholder="@Localizer["SS"]" min="0" max="59" />
                                    </div>
                                </div>
                                <input asp-for="RunTime" type="hidden" id="runTime" />
                                <span asp-validation-for="RunTime" class="text-danger"></span>
                            </div>
                        </div>
                        <div class="mb-3">
                            <div id="runPace" class="pace-display" style="display: none;">
                                <i class="fas fa-tachometer-alt me-2"></i>@Localizer["Run Pace"]: <span id="runPaceValue">0</span> <span id="runPaceUnit">min/mile</span>
                            </div>
                        </div>

                        <div class="d-grid gap-2 d-md-flex justify-content-md-end">
                            <a asp-action="Index" class="btn btn-outline-secondary me-md-2">@Localizer["Cancel"]</a>
                            <button type="submit" class="btn btn-primary">
                                <i class="fas fa-save me-2"></i>@Localizer["Save Race"]
                            </button>
                        </div>
                    </form>
                </div>
            </div>
        </div>

        <div class="col-lg-4">
            <div class="card">
                <div class="card-header">
                    <h5 class="mb-0">
                        <i class="fas fa-calculator me-2"></i>@Localizer["Race Summary"]
                    </h5>
                </div>
                <div class="card-body">
                    <div class="mb-3">
                        <div class="form-check form-check-inline">
                            <input class="form-check-input" type="radio" name="distanceUnit" id="distanceMiles" value="miles" checked>
                            <label class="form-check-label" for="distanceMiles">@Localizer["Miles"]</label>
                        </div>
                        <div class="form-check form-check-inline">
                            <input class="form-check-input" type="radio" name="distanceUnit" id="distanceKm" value="km">
                            <label class="form-check-label" for="distanceKm">@Localizer["Kilometers"]</label>
                        </div>
                    </div>
                    <div id="raceSummary">
                        <div className="text-center text-muted">
                            <i class="fas fa-info-circle fa-2x mb-2"></i>
                            <p>@Localizer["Fill in the race details to see your summary"]</p>
                        </div>
                    </div>
                </div>
            </div>
        </div>
    </div>
</div>

@section Scripts {
    <script type="text/babel">
        const { useState, useEffect } = React;

        // Localized strings from Razor
        const summaryStrings = {
            totalDistance: "@totalDistanceLabel",
            totalDistanceUnitMiles: "@totalDistanceUnitMiles",
            totalTime: "@totalTime",
            swimPace: "@swimPace",
            bikePace: "@bikePace",
            runPace: "@runPace",
            minPer100Yd: "@minPer100Yd",
            minPer100M: "@minPer100M",
            mph: "@mph",
            kmPerHr: "@kmPerHr",
            minPerMile: "@minPerMile",
            minPerKm: "@minPerKm"
        };
        const alertStrings = {
            requiredFields: "@requiredFieldsAlert",
            atLeastOneDiscipline: "@atLeastOneDisciplineAlert",
            swimTimeRequired: "@swimTimeRequired",
            bikeTimeRequired: "@bikeTimeRequired",
            runTimeRequired: "@runTimeRequired",
            raceNameRequired: "@raceNameRequired",
            raceDateRequired: "@raceDateRequired",
            locationRequired: "@locationRequired"
        };

        function RaceSummary() {
            const [summary, setSummary] = useState({
                totalDistance: 0,
                totalTime: '00:00:00',
                swimPace: 0,
                bikePace: 0,
                runPace: 0
            });

            const formatTime = (hours, minutes, seconds) => {
                const h = hours || 0;
                const m = minutes || 0;
                const s = seconds || 0;
                return `${h.toString().padStart(2, '0')}:${m.toString().padStart(2, '0')}:${s.toString().padStart(2, '0')}`;
            };

            const calculatePace = () => {
                const swimDistance = parseFloat(document.getElementById('swimDistance')?.value) || 0;
                const swimUnit = document.getElementById('swimUnit')?.value || 'yards';
                const swimHours = parseInt(document.getElementById('swimHours')?.value) || 0;
                const swimMinutes = parseInt(document.getElementById('swimMinutes')?.value) || 0;
                const swimSeconds = parseInt(document.getElementById('swimSeconds')?.value) || 0;
                
                const bikeDistance = parseFloat(document.getElementById('bikeDistance')?.value) || 0;
                const bikeUnit = document.getElementById('bikeUnit')?.value || 'miles';
                const bikeHours = parseInt(document.getElementById('bikeHours')?.value) || 0;
                const bikeMinutes = parseInt(document.getElementById('bikeMinutes')?.value) || 0;
                const bikeSeconds = parseInt(document.getElementById('bikeSeconds')?.value) || 0;
                
                const runDistance = parseFloat(document.getElementById('runDistance')?.value) || 0;
                const runUnit = document.getElementById('runUnit')?.value || 'miles';
                const runHours = parseInt(document.getElementById('runHours')?.value) || 0;
                const runMinutes = parseInt(document.getElementById('runMinutes')?.value) || 0;
                const runSeconds = parseInt(document.getElementById('runSeconds')?.value) || 0;

                let swimPace = 0;
                let bikePace = 0;
                let runPace = 0;
                let totalTime = 0;

                // Calculate swim pace
                if (swimDistance > 0 && (swimHours > 0 || swimMinutes > 0 || swimSeconds > 0)) {
                    const totalMinutes = swimHours * 60 + swimMinutes + swimSeconds / 60;
                    if (swimUnit === 'yards') {
                        swimPace = totalMinutes / (swimDistance / 100); // min/100 yards
                        document.getElementById('swimPaceUnit').textContent = 'min/100yd';
                    } else {
                        swimPace = totalMinutes / (swimDistance / 100); // min/100 meters
                        document.getElementById('swimPaceUnit').textContent = 'min/100m';
                    }
                    totalTime += totalMinutes * 60;
                    
                    // Update hidden field
                    document.getElementById('swimTime').value = formatTime(swimHours, swimMinutes, swimSeconds);
                } else {
                    // Clear hidden field if no time data
                    document.getElementById('swimTime').value = '';
                }

                // Calculate bike pace
                if (bikeDistance > 0 && (bikeHours > 0 || bikeMinutes > 0 || bikeSeconds > 0)) {
                    const totalHours = bikeHours + bikeMinutes / 60 + bikeSeconds / 3600;
                    if (bikeUnit === 'miles') {
                        bikePace = bikeDistance / totalHours; // mph
                        document.getElementById('bikePaceUnit').textContent = 'mph';
                    } else {
                        bikePace = bikeDistance / totalHours; // km/hr
                        document.getElementById('bikePaceUnit').textContent = 'km/hr';
                    }
                    totalTime += totalHours * 3600;
                    
                    // Update hidden field
                    document.getElementById('bikeTime').value = formatTime(bikeHours, bikeMinutes, bikeSeconds);
                } else {
                    // Clear hidden field if no time data
                    document.getElementById('bikeTime').value = '';
                }

                // Calculate run pace
                if (runDistance > 0 && (runHours > 0 || runMinutes > 0 || runSeconds > 0)) {
                    const totalMinutes = runHours * 60 + runMinutes + runSeconds / 60;
                    if (runUnit === 'miles') {
                        runPace = totalMinutes / runDistance; // min/mile
                        document.getElementById('runPaceUnit').textContent = 'min/mile';
                    } else {
                        runPace = totalMinutes / runDistance; // min/km
                        document.getElementById('runPaceUnit').textContent = 'min/km';
                    }
                    totalTime += totalMinutes * 60;
                    
                    // Update hidden field
                    document.getElementById('runTime').value = formatTime(runHours, runMinutes, runSeconds);
                } else {
                    // Clear hidden field if no time data
                    document.getElementById('runTime').value = '';
                }

                // Format total time
                const totalHours = Math.floor(totalTime / 3600);
                const totalMinutes = Math.floor((totalTime % 3600) / 60);
                const totalSeconds = Math.floor(totalTime % 60);
                const formattedTotalTime = `${totalHours.toString().padStart(2, '0')}:${totalMinutes.toString().padStart(2, '0')}:${totalSeconds.toString().padStart(2, '0')}`;

                // Calculate total distance (convert to km for display)
                let totalDistanceKm = 0;
                if (swimUnit === 'yards') {
                    totalDistanceKm += (swimDistance * 0.9144) / 1000; // yards to km
                } else {
                    totalDistanceKm += swimDistance / 1000; // meters to km
                }
                
                if (bikeUnit === 'miles') {
                    totalDistanceKm += bikeDistance * 1.60934; // miles to km
                } else {
                    totalDistanceKm += bikeDistance;
                }
                
                if (runUnit === 'miles') {
                    totalDistanceKm += runDistance * 1.60934; // miles to km
                } else {
                    totalDistanceKm += runDistance;
                }

                // Get selected distance unit for display
                const distanceUnit = document.querySelector('input[name="distanceUnit"]:checked')?.value || 'miles';
                const totalDistanceDisplay = distanceUnit === 'miles' ? 
                    (totalDistanceKm / 1.60934).toFixed(1) : 
                    totalDistanceKm.toFixed(1);

                // Format run pace as MM:SS
                const runPaceMinutes = Math.floor(runPace);
                const runPaceSeconds = Math.round((runPace - runPaceMinutes) * 60);
                const runPaceFormatted = `${runPaceMinutes.toString().padStart(2, '0')}:${runPaceSeconds.toString().padStart(2, '0')}`;

                // Format swim pace as MM:SS
                const swimPaceMinutes = Math.floor(swimPace);
                const swimPaceSeconds = Math.round((swimPace - swimPaceMinutes) * 60);
                const swimPaceFormatted = `${swimPaceMinutes.toString().padStart(2, '0')}:${swimPaceSeconds.toString().padStart(2, '0')}`;

                setSummary({
                    totalDistance: totalDistanceDisplay,
                    totalTime: formattedTotalTime,
                    swimPace: swimPaceFormatted,
                    bikePace: bikePace.toFixed(1),
                    runPace: runPaceFormatted
                });

                // Update pace displays
                updatePaceDisplay('swimPace', 'swimPaceValue', swimPaceFormatted);
                updatePaceDisplay('bikePace', 'bikePaceValue', bikePace.toFixed(1));
                updatePaceDisplay('runPace', 'runPaceValue', runPaceFormatted);

                // Update summary pace unit displays
                const swimPaceUnitDisplay = document.getElementById('swimPaceUnitDisplay');
                const bikePaceUnitDisplay = document.getElementById('bikePaceUnitDisplay');
                const runPaceUnitDisplay = document.getElementById('runPaceUnitDisplay');

                if (swimPaceUnitDisplay) {
                    swimPaceUnitDisplay.textContent = swimUnit === 'yards' ? 'min/100yd' : 'min/100m';
                }
                if (bikePaceUnitDisplay) {
                    bikePaceUnitDisplay.textContent = bikeUnit === 'miles' ? 'mph' : 'km/hr';
                }
                if (runPaceUnitDisplay) {
                    runPaceUnitDisplay.textContent = runUnit === 'miles' ? 'min/mile' : 'min/km';
                }
            };

            const updatePaceDisplay = (containerId, valueId, value) => {
                const container = document.getElementById(containerId);
                const valueElement = document.getElementById(valueId);
                if (container && valueElement) {
                    valueElement.textContent = value;
                    container.style.display = parseFloat(value) > 0 ? 'block' : 'none';
                }
            };

            useEffect(() => {
                const inputs = [
                    'swimDistance', 'swimHours', 'swimMinutes', 'swimSeconds', 'swimUnit',
                    'bikeDistance', 'bikeHours', 'bikeMinutes', 'bikeSeconds', 'bikeUnit',
                    'runDistance', 'runHours', 'runMinutes', 'runSeconds', 'runUnit',
                    'RaceName', 'RaceDate', 'Location'
                ];
                inputs.forEach(id => {
                    const element = document.getElementById(id);
                    if (element) {
                        element.addEventListener('input', calculatePace);
                        element.addEventListener('change', calculatePace);
                        element.addEventListener('blur', calculatePace);
                    }
                });

                // Set up unit change handlers
                const swimUnitSelect = document.getElementById('swimUnit');
                const bikeUnitSelect = document.getElementById('bikeUnit');
                const runUnitSelect = document.getElementById('runUnit');

                if (swimUnitSelect) {
                    swimUnitSelect.addEventListener('change', (e) => {
                        document.getElementById('swimUnitHidden').value = e.target.value;
                        calculatePace();
                    });
                }

                if (bikeUnitSelect) {
                    bikeUnitSelect.addEventListener('change', (e) => {
                        document.getElementById('bikeUnitHidden').value = e.target.value;
                        calculatePace();
                    });
                }

                if (runUnitSelect) {
                    runUnitSelect.addEventListener('change', (e) => {
                        document.getElementById('runUnitHidden').value = e.target.value;
                        calculatePace();
                    });
                }

                // Set up distance unit toggle handlers
                const distanceUnitRadios = document.querySelectorAll('input[name="distanceUnit"]');
                distanceUnitRadios.forEach(radio => {
                    radio.addEventListener('change', calculatePace);
                });

                // Real-time validation
                const showValidationErrors = (errors) => {
                    const summary = document.getElementById('validationSummary');
                    if (summary) {
                        if (errors.length > 0) {
                            summary.innerHTML = '<ul>' + errors.map(e => `<li>${e}</li>`).join('') + '</ul>';
                            summary.style.display = 'block';
                        } else {
                            summary.innerHTML = '';
                            summary.style.display = 'none';
                        }
                    }
                };

                const validateForm = () => {
                    const errors = [];
                    const raceName = document.getElementById('RaceName')?.value;
                    const raceDate = document.getElementById('RaceDate')?.value;
                    const location = document.getElementById('Location')?.value;
                    const swimDistance = parseFloat(document.getElementById('swimDistance')?.value) || 0;
                    const swimTime = document.getElementById('swimTime')?.value;
                    const bikeDistance = parseFloat(document.getElementById('bikeDistance')?.value) || 0;
                    const bikeTime = document.getElementById('bikeTime')?.value;
                    const runDistance = parseFloat(document.getElementById('runDistance')?.value) || 0;
                    const runTime = document.getElementById('runTime')?.value;

                    if (!raceName) errors.push(raceNameRequired);
                    if (!raceDate) errors.push(raceDateRequired);
                    if (!location) errors.push(locationRequired);
                    if (swimDistance > 0 && !swimTime) errors.push(swimTimeRequired);
                    if (bikeDistance > 0 && !bikeTime) errors.push(bikeTimeRequired);
                    if (runDistance > 0 && !runTime) errors.push(runTimeRequired);
                    if (swimDistance === 0 && bikeDistance === 0 && runDistance === 0) errors.push(atLeastOneDisciplineAlert);
                    showValidationErrors(errors);
                    return errors.length === 0;
                };

                // Validate on input
                inputs.forEach(id => {
                    const element = document.getElementById(id);
                    if (element) {
                        element.addEventListener('input', validateForm);
                        element.addEventListener('change', validateForm);
                        element.addEventListener('blur', validateForm);
                    }
                });

                // Set up form submission handler
                const form = document.querySelector('form[asp-action="Create"]');
                if (form) {
                    form.addEventListener('submit', (e) => {
                        calculatePace();
                        if (!validateForm()) {
                            e.preventDefault();
                        }
                    });
                }

                return () => {
                    inputs.forEach(id => {
                        const element = document.getElementById(id);
                        if (element) {
                            element.removeEventListener('input', calculatePace);
                            element.removeEventListener('change', calculatePace);
                            element.removeEventListener('blur', calculatePace);
                            element.removeEventListener('input', validateForm);
                            element.removeEventListener('change', validateForm);
                            element.removeEventListener('blur', validateForm);
                        }
                    });

                    if (swimUnitSelect) {
                        swimUnitSelect.removeEventListener('change', calculatePace);
                    }
                    if (bikeUnitSelect) {
                        bikeUnitSelect.removeEventListener('change', calculatePace);
                    }
                    if (runUnitSelect) {
                        runUnitSelect.removeEventListener('change', calculatePace);
                    }

                    distanceUnitRadios.forEach(radio => {
                        radio.removeEventListener('change', calculatePace);
                    });

                    if (form) {
                        form.removeEventListener('submit', calculatePace);
                    }
                };
            }, []);

            return (
                <div>
                    <div className="stats-card mb-3">
                        <h3>{summary.totalDistance}</h3>
                        <p>{summaryStrings.totalDistance} ({summaryStrings.totalDistanceUnitMiles})</p>
                    </div>
                    <div className="stats-card mb-3">
                        <h3>{summary.totalTime}</h3>
                        <p>{summaryStrings.totalTime}</p>
                    </div>
                    <div className="row">
                        <div className="col-6">
                            <div className="text-center p-2 bg-light rounded">
                                <small className="text-muted">{summaryStrings.swimPace}</small>
                                <div className="fw-bold text-primary">{summary.swimPace} <span id="swimPaceUnitDisplay">{summaryStrings.minPer100Yd}</span></div>
                            </div>
                        </div>
                        <div className="col-6">
                            <div className="text-center p-2 bg-light rounded">
                                <small className="text-muted">{summaryStrings.bikePace}</small>
                                <div className="fw-bold text-primary">{summary.bikePace} <span id="bikePaceUnitDisplay">{summaryStrings.mph}</span></div>
                            </div>
                        </div>
                    </div>
                    <div className="row mt-2">
                        <div className="col-12">
                            <div className="text-center p-2 bg-light rounded">
                                <small className="text-muted">{summaryStrings.runPace}</small>
                                <div className="fw-bold text-primary">{summary.runPace} <span id="runPaceUnitDisplay">{summaryStrings.minPerMile}</span></div>
                            </div>
                        </div>
                    </div>
                </div>
            );
        }

        const root = ReactDOM.createRoot(document.getElementById('raceSummary'));
        root.render(<RaceSummary />);
    </script>
} 